// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/detail": {
            "get": {
                "description": "用户的详情",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户模块"
                ],
                "summary": "用户详情",
                "parameters": [
                    {
                        "description": "请求值",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.DetailReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.ResponseEntity"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.DetailResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/edit": {
            "post": {
                "description": "编辑用户",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户模块"
                ],
                "summary": "用户编辑",
                "parameters": [
                    {
                        "description": "请求值",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.EditReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseEntity"
                        }
                    }
                }
            }
        },
        "/list": {
            "get": {
                "description": "用户的列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户模块"
                ],
                "summary": "用户列表",
                "parameters": [
                    {
                        "description": "请求值",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.ListReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.ResponseEntity"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.ListResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "用户注册的接口",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户模块"
                ],
                "summary": "用户注册",
                "parameters": [
                    {
                        "description": "请求值",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.ResponseEntity"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.RegisterResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ent.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt holds the value of the \"deleted_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "identity": {
                    "description": "Identity holds the value of the \"identity\" field.",
                    "type": "string"
                },
                "is_disable": {
                    "description": "IsDisable holds the value of the \"is_disable\" field.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user": {
                    "description": "Type holds the value of the \"user\" field.",
                    "type": "integer"
                }
            }
        },
        "ent.UserAccount": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt holds the value of the \"deleted_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "password": {
                    "description": "Password holds the value of the \"password\" field.",
                    "type": "string"
                },
                "salt": {
                    "description": "Salt holds the value of the \"salt\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user": {
                    "description": "Account holds the value of the \"user\" field.",
                    "type": "integer"
                },
                "user_identity": {
                    "description": "UserIdentity holds the value of the \"user_identity\" field.",
                    "type": "string"
                }
            }
        },
        "ent.UserExtend": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt holds the value of the \"deleted_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user_identity": {
                    "description": "UserIdentity holds the value of the \"user_identity\" field.",
                    "type": "string"
                }
            }
        },
        "ent.UserInfo": {
            "type": "object",
            "properties": {
                "channel": {
                    "description": "Channel holds the value of the \"channel\" field.",
                    "type": "integer"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt holds the value of the \"deleted_at\" field.",
                    "type": "string"
                },
                "form": {
                    "description": "Form holds the value of the \"form\" field.",
                    "type": "integer"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user_identity": {
                    "description": "UserIdentity holds the value of the \"user_identity\" field.",
                    "type": "string"
                }
            }
        },
        "entity.DetailEntity": {
            "type": "object",
            "properties": {
                "userAccount": {
                    "$ref": "#/definitions/ent.UserAccount"
                },
                "userEntity": {
                    "$ref": "#/definitions/ent.User"
                },
                "userExtendEntity": {
                    "$ref": "#/definitions/ent.UserExtend"
                },
                "userInfoEntity": {
                    "$ref": "#/definitions/ent.UserInfo"
                }
            }
        },
        "entity.UserBasis": {
            "type": "object",
            "properties": {
                "userEntity": {
                    "$ref": "#/definitions/ent.User"
                },
                "userExtendEntity": {
                    "$ref": "#/definitions/ent.UserExtend"
                },
                "userInfoEntity": {
                    "$ref": "#/definitions/ent.UserInfo"
                }
            }
        },
        "http.ResponseEntity": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "响应数据"
                },
                "errcode": {
                    "description": "错误码",
                    "type": "integer"
                },
                "errmsg": {
                    "description": "响应消息",
                    "type": "string"
                }
            }
        },
        "user.DetailReq": {
            "type": "object",
            "properties": {
                "accountType": {
                    "description": "账号类型：0-用户密码，1-手机号码",
                    "type": "integer"
                },
                "identity": {
                    "description": "唯一标识",
                    "type": "string"
                }
            }
        },
        "user.DetailResp": {
            "type": "object",
            "properties": {
                "detail": {
                    "$ref": "#/definitions/entity.DetailEntity"
                }
            }
        },
        "user.EditReq": {
            "type": "object",
            "required": [
                "userIdentity"
            ],
            "properties": {
                "accountType": {
                    "description": "账号类型：0-用户密码，1-手机号码",
                    "type": "integer"
                },
                "extra": {
                    "description": "额外字段，字段为json，格式：",
                    "type": "string"
                },
                "identity": {
                    "description": "唯一标识",
                    "type": "string"
                },
                "userIdentity": {
                    "description": "用户标识",
                    "type": "string"
                }
            }
        },
        "user.ListReq": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "范围，默认：15",
                    "type": "integer"
                },
                "start": {
                    "description": "开始，默认：0",
                    "type": "integer"
                },
                "userType": {
                    "description": "用户类型",
                    "type": "integer"
                }
            }
        },
        "user.ListResp": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.UserBasis"
                    }
                }
            }
        },
        "user.RegisterReq": {
            "type": "object",
            "required": [
                "identity"
            ],
            "properties": {
                "accountType": {
                    "description": "账号类型：0-用户密码，1-手机号码",
                    "type": "integer"
                },
                "extra": {
                    "description": "额外字段，字段为json，格式：",
                    "type": "string"
                },
                "identity": {
                    "description": "唯一标识",
                    "type": "string"
                }
            }
        },
        "user.RegisterResp": {
            "type": "object",
            "properties": {
                "userIdentity": {
                    "description": "用户标识",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
