// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/thoohv5/template/internal/ent/migrate"

	"github.com/thoohv5/template/internal/ent/miniprogramaccount"
	"github.com/thoohv5/template/internal/ent/phoneaccount"
	"github.com/thoohv5/template/internal/ent/user"
	"github.com/thoohv5/template/internal/ent/useraccount"
	"github.com/thoohv5/template/internal/ent/userextend"
	"github.com/thoohv5/template/internal/ent/userinfo"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// MiniProgramAccount is the client for interacting with the MiniProgramAccount builders.
	MiniProgramAccount *MiniProgramAccountClient
	// PhoneAccount is the client for interacting with the PhoneAccount builders.
	PhoneAccount *PhoneAccountClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserAccount is the client for interacting with the UserAccount builders.
	UserAccount *UserAccountClient
	// UserExtend is the client for interacting with the UserExtend builders.
	UserExtend *UserExtendClient
	// UserInfo is the client for interacting with the UserInfo builders.
	UserInfo *UserInfoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.MiniProgramAccount = NewMiniProgramAccountClient(c.config)
	c.PhoneAccount = NewPhoneAccountClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserAccount = NewUserAccountClient(c.config)
	c.UserExtend = NewUserExtendClient(c.config)
	c.UserInfo = NewUserInfoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		MiniProgramAccount: NewMiniProgramAccountClient(cfg),
		PhoneAccount:       NewPhoneAccountClient(cfg),
		User:               NewUserClient(cfg),
		UserAccount:        NewUserAccountClient(cfg),
		UserExtend:         NewUserExtendClient(cfg),
		UserInfo:           NewUserInfoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:             cfg,
		MiniProgramAccount: NewMiniProgramAccountClient(cfg),
		PhoneAccount:       NewPhoneAccountClient(cfg),
		User:               NewUserClient(cfg),
		UserAccount:        NewUserAccountClient(cfg),
		UserExtend:         NewUserExtendClient(cfg),
		UserInfo:           NewUserInfoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		MiniProgramAccount.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.MiniProgramAccount.Use(hooks...)
	c.PhoneAccount.Use(hooks...)
	c.User.Use(hooks...)
	c.UserAccount.Use(hooks...)
	c.UserExtend.Use(hooks...)
	c.UserInfo.Use(hooks...)
}

// MiniProgramAccountClient is a client for the MiniProgramAccount schema.
type MiniProgramAccountClient struct {
	config
}

// NewMiniProgramAccountClient returns a client for the MiniProgramAccount from the given config.
func NewMiniProgramAccountClient(c config) *MiniProgramAccountClient {
	return &MiniProgramAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `miniprogramaccount.Hooks(f(g(h())))`.
func (c *MiniProgramAccountClient) Use(hooks ...Hook) {
	c.hooks.MiniProgramAccount = append(c.hooks.MiniProgramAccount, hooks...)
}

// Create returns a create builder for MiniProgramAccount.
func (c *MiniProgramAccountClient) Create() *MiniProgramAccountCreate {
	mutation := newMiniProgramAccountMutation(c.config, OpCreate)
	return &MiniProgramAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of MiniProgramAccount entities.
func (c *MiniProgramAccountClient) CreateBulk(builders ...*MiniProgramAccountCreate) *MiniProgramAccountCreateBulk {
	return &MiniProgramAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MiniProgramAccount.
func (c *MiniProgramAccountClient) Update() *MiniProgramAccountUpdate {
	mutation := newMiniProgramAccountMutation(c.config, OpUpdate)
	return &MiniProgramAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MiniProgramAccountClient) UpdateOne(mpa *MiniProgramAccount) *MiniProgramAccountUpdateOne {
	mutation := newMiniProgramAccountMutation(c.config, OpUpdateOne, withMiniProgramAccount(mpa))
	return &MiniProgramAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MiniProgramAccountClient) UpdateOneID(id int64) *MiniProgramAccountUpdateOne {
	mutation := newMiniProgramAccountMutation(c.config, OpUpdateOne, withMiniProgramAccountID(id))
	return &MiniProgramAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MiniProgramAccount.
func (c *MiniProgramAccountClient) Delete() *MiniProgramAccountDelete {
	mutation := newMiniProgramAccountMutation(c.config, OpDelete)
	return &MiniProgramAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MiniProgramAccountClient) DeleteOne(mpa *MiniProgramAccount) *MiniProgramAccountDeleteOne {
	return c.DeleteOneID(mpa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MiniProgramAccountClient) DeleteOneID(id int64) *MiniProgramAccountDeleteOne {
	builder := c.Delete().Where(miniprogramaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MiniProgramAccountDeleteOne{builder}
}

// Query returns a query builder for MiniProgramAccount.
func (c *MiniProgramAccountClient) Query() *MiniProgramAccountQuery {
	return &MiniProgramAccountQuery{config: c.config}
}

// Get returns a MiniProgramAccount entity by its id.
func (c *MiniProgramAccountClient) Get(ctx context.Context, id int64) (*MiniProgramAccount, error) {
	return c.Query().Where(miniprogramaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MiniProgramAccountClient) GetX(ctx context.Context, id int64) *MiniProgramAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MiniProgramAccountClient) Hooks() []Hook {
	return c.hooks.MiniProgramAccount
}

// PhoneAccountClient is a client for the PhoneAccount schema.
type PhoneAccountClient struct {
	config
}

// NewPhoneAccountClient returns a client for the PhoneAccount from the given config.
func NewPhoneAccountClient(c config) *PhoneAccountClient {
	return &PhoneAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `phoneaccount.Hooks(f(g(h())))`.
func (c *PhoneAccountClient) Use(hooks ...Hook) {
	c.hooks.PhoneAccount = append(c.hooks.PhoneAccount, hooks...)
}

// Create returns a create builder for PhoneAccount.
func (c *PhoneAccountClient) Create() *PhoneAccountCreate {
	mutation := newPhoneAccountMutation(c.config, OpCreate)
	return &PhoneAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of PhoneAccount entities.
func (c *PhoneAccountClient) CreateBulk(builders ...*PhoneAccountCreate) *PhoneAccountCreateBulk {
	return &PhoneAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PhoneAccount.
func (c *PhoneAccountClient) Update() *PhoneAccountUpdate {
	mutation := newPhoneAccountMutation(c.config, OpUpdate)
	return &PhoneAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhoneAccountClient) UpdateOne(pa *PhoneAccount) *PhoneAccountUpdateOne {
	mutation := newPhoneAccountMutation(c.config, OpUpdateOne, withPhoneAccount(pa))
	return &PhoneAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhoneAccountClient) UpdateOneID(id int64) *PhoneAccountUpdateOne {
	mutation := newPhoneAccountMutation(c.config, OpUpdateOne, withPhoneAccountID(id))
	return &PhoneAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PhoneAccount.
func (c *PhoneAccountClient) Delete() *PhoneAccountDelete {
	mutation := newPhoneAccountMutation(c.config, OpDelete)
	return &PhoneAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PhoneAccountClient) DeleteOne(pa *PhoneAccount) *PhoneAccountDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PhoneAccountClient) DeleteOneID(id int64) *PhoneAccountDeleteOne {
	builder := c.Delete().Where(phoneaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhoneAccountDeleteOne{builder}
}

// Query returns a query builder for PhoneAccount.
func (c *PhoneAccountClient) Query() *PhoneAccountQuery {
	return &PhoneAccountQuery{config: c.config}
}

// Get returns a PhoneAccount entity by its id.
func (c *PhoneAccountClient) Get(ctx context.Context, id int64) (*PhoneAccount, error) {
	return c.Query().Where(phoneaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhoneAccountClient) GetX(ctx context.Context, id int64) *PhoneAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PhoneAccountClient) Hooks() []Hook {
	return c.hooks.PhoneAccount
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserAccountClient is a client for the UserAccount schema.
type UserAccountClient struct {
	config
}

// NewUserAccountClient returns a client for the UserAccount from the given config.
func NewUserAccountClient(c config) *UserAccountClient {
	return &UserAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useraccount.Hooks(f(g(h())))`.
func (c *UserAccountClient) Use(hooks ...Hook) {
	c.hooks.UserAccount = append(c.hooks.UserAccount, hooks...)
}

// Create returns a create builder for UserAccount.
func (c *UserAccountClient) Create() *UserAccountCreate {
	mutation := newUserAccountMutation(c.config, OpCreate)
	return &UserAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of UserAccount entities.
func (c *UserAccountClient) CreateBulk(builders ...*UserAccountCreate) *UserAccountCreateBulk {
	return &UserAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserAccount.
func (c *UserAccountClient) Update() *UserAccountUpdate {
	mutation := newUserAccountMutation(c.config, OpUpdate)
	return &UserAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserAccountClient) UpdateOne(ua *UserAccount) *UserAccountUpdateOne {
	mutation := newUserAccountMutation(c.config, OpUpdateOne, withUserAccount(ua))
	return &UserAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserAccountClient) UpdateOneID(id int64) *UserAccountUpdateOne {
	mutation := newUserAccountMutation(c.config, OpUpdateOne, withUserAccountID(id))
	return &UserAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserAccount.
func (c *UserAccountClient) Delete() *UserAccountDelete {
	mutation := newUserAccountMutation(c.config, OpDelete)
	return &UserAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserAccountClient) DeleteOne(ua *UserAccount) *UserAccountDeleteOne {
	return c.DeleteOneID(ua.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserAccountClient) DeleteOneID(id int64) *UserAccountDeleteOne {
	builder := c.Delete().Where(useraccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserAccountDeleteOne{builder}
}

// Query returns a query builder for UserAccount.
func (c *UserAccountClient) Query() *UserAccountQuery {
	return &UserAccountQuery{config: c.config}
}

// Get returns a UserAccount entity by its id.
func (c *UserAccountClient) Get(ctx context.Context, id int64) (*UserAccount, error) {
	return c.Query().Where(useraccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserAccountClient) GetX(ctx context.Context, id int64) *UserAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserAccountClient) Hooks() []Hook {
	return c.hooks.UserAccount
}

// UserExtendClient is a client for the UserExtend schema.
type UserExtendClient struct {
	config
}

// NewUserExtendClient returns a client for the UserExtend from the given config.
func NewUserExtendClient(c config) *UserExtendClient {
	return &UserExtendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userextend.Hooks(f(g(h())))`.
func (c *UserExtendClient) Use(hooks ...Hook) {
	c.hooks.UserExtend = append(c.hooks.UserExtend, hooks...)
}

// Create returns a create builder for UserExtend.
func (c *UserExtendClient) Create() *UserExtendCreate {
	mutation := newUserExtendMutation(c.config, OpCreate)
	return &UserExtendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of UserExtend entities.
func (c *UserExtendClient) CreateBulk(builders ...*UserExtendCreate) *UserExtendCreateBulk {
	return &UserExtendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserExtend.
func (c *UserExtendClient) Update() *UserExtendUpdate {
	mutation := newUserExtendMutation(c.config, OpUpdate)
	return &UserExtendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserExtendClient) UpdateOne(ue *UserExtend) *UserExtendUpdateOne {
	mutation := newUserExtendMutation(c.config, OpUpdateOne, withUserExtend(ue))
	return &UserExtendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserExtendClient) UpdateOneID(id int64) *UserExtendUpdateOne {
	mutation := newUserExtendMutation(c.config, OpUpdateOne, withUserExtendID(id))
	return &UserExtendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserExtend.
func (c *UserExtendClient) Delete() *UserExtendDelete {
	mutation := newUserExtendMutation(c.config, OpDelete)
	return &UserExtendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserExtendClient) DeleteOne(ue *UserExtend) *UserExtendDeleteOne {
	return c.DeleteOneID(ue.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserExtendClient) DeleteOneID(id int64) *UserExtendDeleteOne {
	builder := c.Delete().Where(userextend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserExtendDeleteOne{builder}
}

// Query returns a query builder for UserExtend.
func (c *UserExtendClient) Query() *UserExtendQuery {
	return &UserExtendQuery{config: c.config}
}

// Get returns a UserExtend entity by its id.
func (c *UserExtendClient) Get(ctx context.Context, id int64) (*UserExtend, error) {
	return c.Query().Where(userextend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserExtendClient) GetX(ctx context.Context, id int64) *UserExtend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserExtendClient) Hooks() []Hook {
	return c.hooks.UserExtend
}

// UserInfoClient is a client for the UserInfo schema.
type UserInfoClient struct {
	config
}

// NewUserInfoClient returns a client for the UserInfo from the given config.
func NewUserInfoClient(c config) *UserInfoClient {
	return &UserInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userinfo.Hooks(f(g(h())))`.
func (c *UserInfoClient) Use(hooks ...Hook) {
	c.hooks.UserInfo = append(c.hooks.UserInfo, hooks...)
}

// Create returns a create builder for UserInfo.
func (c *UserInfoClient) Create() *UserInfoCreate {
	mutation := newUserInfoMutation(c.config, OpCreate)
	return &UserInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of UserInfo entities.
func (c *UserInfoClient) CreateBulk(builders ...*UserInfoCreate) *UserInfoCreateBulk {
	return &UserInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserInfo.
func (c *UserInfoClient) Update() *UserInfoUpdate {
	mutation := newUserInfoMutation(c.config, OpUpdate)
	return &UserInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserInfoClient) UpdateOne(ui *UserInfo) *UserInfoUpdateOne {
	mutation := newUserInfoMutation(c.config, OpUpdateOne, withUserInfo(ui))
	return &UserInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserInfoClient) UpdateOneID(id int64) *UserInfoUpdateOne {
	mutation := newUserInfoMutation(c.config, OpUpdateOne, withUserInfoID(id))
	return &UserInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserInfo.
func (c *UserInfoClient) Delete() *UserInfoDelete {
	mutation := newUserInfoMutation(c.config, OpDelete)
	return &UserInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserInfoClient) DeleteOne(ui *UserInfo) *UserInfoDeleteOne {
	return c.DeleteOneID(ui.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserInfoClient) DeleteOneID(id int64) *UserInfoDeleteOne {
	builder := c.Delete().Where(userinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserInfoDeleteOne{builder}
}

// Query returns a query builder for UserInfo.
func (c *UserInfoClient) Query() *UserInfoQuery {
	return &UserInfoQuery{config: c.config}
}

// Get returns a UserInfo entity by its id.
func (c *UserInfoClient) Get(ctx context.Context, id int64) (*UserInfo, error) {
	return c.Query().Where(userinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserInfoClient) GetX(ctx context.Context, id int64) *UserInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserInfoClient) Hooks() []Hook {
	return c.hooks.UserInfo
}
