// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/thoohv5/template/internal/ent/miniprogramaccount"
)

// MiniProgramAccountCreate is the builder for creating a MiniProgramAccount entity.
type MiniProgramAccountCreate struct {
	config
	mutation *MiniProgramAccountMutation
	hooks    []Hook
}

// SetUserIdentity sets the user_identity field.
func (mpac *MiniProgramAccountCreate) SetUserIdentity(s string) *MiniProgramAccountCreate {
	mpac.mutation.SetUserIdentity(s)
	return mpac
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableUserIdentity(s *string) *MiniProgramAccountCreate {
	if s != nil {
		mpac.SetUserIdentity(*s)
	}
	return mpac
}

// SetOpenID sets the open_id field.
func (mpac *MiniProgramAccountCreate) SetOpenID(s string) *MiniProgramAccountCreate {
	mpac.mutation.SetOpenID(s)
	return mpac
}

// SetNillableOpenID sets the open_id field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableOpenID(s *string) *MiniProgramAccountCreate {
	if s != nil {
		mpac.SetOpenID(*s)
	}
	return mpac
}

// SetNickName sets the nick_name field.
func (mpac *MiniProgramAccountCreate) SetNickName(s string) *MiniProgramAccountCreate {
	mpac.mutation.SetNickName(s)
	return mpac
}

// SetNillableNickName sets the nick_name field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableNickName(s *string) *MiniProgramAccountCreate {
	if s != nil {
		mpac.SetNickName(*s)
	}
	return mpac
}

// SetAvatarURL sets the avatar_url field.
func (mpac *MiniProgramAccountCreate) SetAvatarURL(s string) *MiniProgramAccountCreate {
	mpac.mutation.SetAvatarURL(s)
	return mpac
}

// SetNillableAvatarURL sets the avatar_url field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableAvatarURL(s *string) *MiniProgramAccountCreate {
	if s != nil {
		mpac.SetAvatarURL(*s)
	}
	return mpac
}

// SetGender sets the gender field.
func (mpac *MiniProgramAccountCreate) SetGender(i int32) *MiniProgramAccountCreate {
	mpac.mutation.SetGender(i)
	return mpac
}

// SetNillableGender sets the gender field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableGender(i *int32) *MiniProgramAccountCreate {
	if i != nil {
		mpac.SetGender(*i)
	}
	return mpac
}

// SetCountry sets the country field.
func (mpac *MiniProgramAccountCreate) SetCountry(s string) *MiniProgramAccountCreate {
	mpac.mutation.SetCountry(s)
	return mpac
}

// SetNillableCountry sets the country field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableCountry(s *string) *MiniProgramAccountCreate {
	if s != nil {
		mpac.SetCountry(*s)
	}
	return mpac
}

// SetProvince sets the province field.
func (mpac *MiniProgramAccountCreate) SetProvince(s string) *MiniProgramAccountCreate {
	mpac.mutation.SetProvince(s)
	return mpac
}

// SetNillableProvince sets the province field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableProvince(s *string) *MiniProgramAccountCreate {
	if s != nil {
		mpac.SetProvince(*s)
	}
	return mpac
}

// SetCity sets the city field.
func (mpac *MiniProgramAccountCreate) SetCity(s string) *MiniProgramAccountCreate {
	mpac.mutation.SetCity(s)
	return mpac
}

// SetNillableCity sets the city field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableCity(s *string) *MiniProgramAccountCreate {
	if s != nil {
		mpac.SetCity(*s)
	}
	return mpac
}

// SetLanguage sets the language field.
func (mpac *MiniProgramAccountCreate) SetLanguage(s string) *MiniProgramAccountCreate {
	mpac.mutation.SetLanguage(s)
	return mpac
}

// SetNillableLanguage sets the language field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableLanguage(s *string) *MiniProgramAccountCreate {
	if s != nil {
		mpac.SetLanguage(*s)
	}
	return mpac
}

// SetCreatedAt sets the created_at field.
func (mpac *MiniProgramAccountCreate) SetCreatedAt(t time.Time) *MiniProgramAccountCreate {
	mpac.mutation.SetCreatedAt(t)
	return mpac
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableCreatedAt(t *time.Time) *MiniProgramAccountCreate {
	if t != nil {
		mpac.SetCreatedAt(*t)
	}
	return mpac
}

// SetUpdatedAt sets the updated_at field.
func (mpac *MiniProgramAccountCreate) SetUpdatedAt(t time.Time) *MiniProgramAccountCreate {
	mpac.mutation.SetUpdatedAt(t)
	return mpac
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableUpdatedAt(t *time.Time) *MiniProgramAccountCreate {
	if t != nil {
		mpac.SetUpdatedAt(*t)
	}
	return mpac
}

// SetDeletedAt sets the deleted_at field.
func (mpac *MiniProgramAccountCreate) SetDeletedAt(t time.Time) *MiniProgramAccountCreate {
	mpac.mutation.SetDeletedAt(t)
	return mpac
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (mpac *MiniProgramAccountCreate) SetNillableDeletedAt(t *time.Time) *MiniProgramAccountCreate {
	if t != nil {
		mpac.SetDeletedAt(*t)
	}
	return mpac
}

// SetID sets the id field.
func (mpac *MiniProgramAccountCreate) SetID(i int64) *MiniProgramAccountCreate {
	mpac.mutation.SetID(i)
	return mpac
}

// Mutation returns the MiniProgramAccountMutation object of the builder.
func (mpac *MiniProgramAccountCreate) Mutation() *MiniProgramAccountMutation {
	return mpac.mutation
}

// Save creates the MiniProgramAccount in the database.
func (mpac *MiniProgramAccountCreate) Save(ctx context.Context) (*MiniProgramAccount, error) {
	var (
		err  error
		node *MiniProgramAccount
	)
	mpac.defaults()
	if len(mpac.hooks) == 0 {
		if err = mpac.check(); err != nil {
			return nil, err
		}
		node, err = mpac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiniProgramAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpac.check(); err != nil {
				return nil, err
			}
			mpac.mutation = mutation
			node, err = mpac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mpac.hooks) - 1; i >= 0; i-- {
			mut = mpac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mpac *MiniProgramAccountCreate) SaveX(ctx context.Context) *MiniProgramAccount {
	v, err := mpac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mpac *MiniProgramAccountCreate) defaults() {
	if _, ok := mpac.mutation.NickName(); !ok {
		v := miniprogramaccount.DefaultNickName
		mpac.mutation.SetNickName(v)
	}
	if _, ok := mpac.mutation.AvatarURL(); !ok {
		v := miniprogramaccount.DefaultAvatarURL
		mpac.mutation.SetAvatarURL(v)
	}
	if _, ok := mpac.mutation.Gender(); !ok {
		v := miniprogramaccount.DefaultGender
		mpac.mutation.SetGender(v)
	}
	if _, ok := mpac.mutation.Country(); !ok {
		v := miniprogramaccount.DefaultCountry
		mpac.mutation.SetCountry(v)
	}
	if _, ok := mpac.mutation.Province(); !ok {
		v := miniprogramaccount.DefaultProvince
		mpac.mutation.SetProvince(v)
	}
	if _, ok := mpac.mutation.City(); !ok {
		v := miniprogramaccount.DefaultCity
		mpac.mutation.SetCity(v)
	}
	if _, ok := mpac.mutation.Language(); !ok {
		v := miniprogramaccount.DefaultLanguage
		mpac.mutation.SetLanguage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpac *MiniProgramAccountCreate) check() error {
	if _, ok := mpac.mutation.NickName(); !ok {
		return &ValidationError{Name: "nick_name", err: errors.New("ent: missing required field \"nick_name\"")}
	}
	if _, ok := mpac.mutation.AvatarURL(); !ok {
		return &ValidationError{Name: "avatar_url", err: errors.New("ent: missing required field \"avatar_url\"")}
	}
	if _, ok := mpac.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New("ent: missing required field \"gender\"")}
	}
	if _, ok := mpac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New("ent: missing required field \"country\"")}
	}
	if _, ok := mpac.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New("ent: missing required field \"province\"")}
	}
	if _, ok := mpac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New("ent: missing required field \"city\"")}
	}
	if _, ok := mpac.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New("ent: missing required field \"language\"")}
	}
	return nil
}

func (mpac *MiniProgramAccountCreate) sqlSave(ctx context.Context) (*MiniProgramAccount, error) {
	_node, _spec := mpac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (mpac *MiniProgramAccountCreate) createSpec() (*MiniProgramAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &MiniProgramAccount{config: mpac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: miniprogramaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: miniprogramaccount.FieldID,
			},
		}
	)
	if id, ok := mpac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mpac.mutation.UserIdentity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miniprogramaccount.FieldUserIdentity,
		})
		_node.UserIdentity = value
	}
	if value, ok := mpac.mutation.OpenID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miniprogramaccount.FieldOpenID,
		})
		_node.OpenID = value
	}
	if value, ok := mpac.mutation.NickName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miniprogramaccount.FieldNickName,
		})
		_node.NickName = value
	}
	if value, ok := mpac.mutation.AvatarURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miniprogramaccount.FieldAvatarURL,
		})
		_node.AvatarURL = value
	}
	if value, ok := mpac.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: miniprogramaccount.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := mpac.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miniprogramaccount.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := mpac.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miniprogramaccount.FieldProvince,
		})
		_node.Province = value
	}
	if value, ok := mpac.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miniprogramaccount.FieldCity,
		})
		_node.City = value
	}
	if value, ok := mpac.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miniprogramaccount.FieldLanguage,
		})
		_node.Language = value
	}
	if value, ok := mpac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: miniprogramaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mpac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: miniprogramaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mpac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: miniprogramaccount.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// MiniProgramAccountCreateBulk is the builder for creating a bulk of MiniProgramAccount entities.
type MiniProgramAccountCreateBulk struct {
	config
	builders []*MiniProgramAccountCreate
}

// Save creates the MiniProgramAccount entities in the database.
func (mpacb *MiniProgramAccountCreateBulk) Save(ctx context.Context) ([]*MiniProgramAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mpacb.builders))
	nodes := make([]*MiniProgramAccount, len(mpacb.builders))
	mutators := make([]Mutator, len(mpacb.builders))
	for i := range mpacb.builders {
		func(i int, root context.Context) {
			builder := mpacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MiniProgramAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mpacb *MiniProgramAccountCreateBulk) SaveX(ctx context.Context) []*MiniProgramAccount {
	v, err := mpacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
