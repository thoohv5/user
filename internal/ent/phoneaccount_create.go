// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/thoohv5/template/internal/ent/phoneaccount"
)

// PhoneAccountCreate is the builder for creating a PhoneAccount entity.
type PhoneAccountCreate struct {
	config
	mutation *PhoneAccountMutation
	hooks    []Hook
}

// SetUserIdentity sets the user_identity field.
func (pac *PhoneAccountCreate) SetUserIdentity(s string) *PhoneAccountCreate {
	pac.mutation.SetUserIdentity(s)
	return pac
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (pac *PhoneAccountCreate) SetNillableUserIdentity(s *string) *PhoneAccountCreate {
	if s != nil {
		pac.SetUserIdentity(*s)
	}
	return pac
}

// SetPhone sets the phone field.
func (pac *PhoneAccountCreate) SetPhone(s string) *PhoneAccountCreate {
	pac.mutation.SetPhone(s)
	return pac
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (pac *PhoneAccountCreate) SetNillablePhone(s *string) *PhoneAccountCreate {
	if s != nil {
		pac.SetPhone(*s)
	}
	return pac
}

// SetCreatedAt sets the created_at field.
func (pac *PhoneAccountCreate) SetCreatedAt(t time.Time) *PhoneAccountCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pac *PhoneAccountCreate) SetNillableCreatedAt(t *time.Time) *PhoneAccountCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the updated_at field.
func (pac *PhoneAccountCreate) SetUpdatedAt(t time.Time) *PhoneAccountCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pac *PhoneAccountCreate) SetNillableUpdatedAt(t *time.Time) *PhoneAccountCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetDeletedAt sets the deleted_at field.
func (pac *PhoneAccountCreate) SetDeletedAt(t time.Time) *PhoneAccountCreate {
	pac.mutation.SetDeletedAt(t)
	return pac
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (pac *PhoneAccountCreate) SetNillableDeletedAt(t *time.Time) *PhoneAccountCreate {
	if t != nil {
		pac.SetDeletedAt(*t)
	}
	return pac
}

// SetID sets the id field.
func (pac *PhoneAccountCreate) SetID(i int64) *PhoneAccountCreate {
	pac.mutation.SetID(i)
	return pac
}

// Mutation returns the PhoneAccountMutation object of the builder.
func (pac *PhoneAccountCreate) Mutation() *PhoneAccountMutation {
	return pac.mutation
}

// Save creates the PhoneAccount in the database.
func (pac *PhoneAccountCreate) Save(ctx context.Context) (*PhoneAccount, error) {
	var (
		err  error
		node *PhoneAccount
	)
	if len(pac.hooks) == 0 {
		if err = pac.check(); err != nil {
			return nil, err
		}
		node, err = pac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhoneAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation user %T", m)
			}
			if err = pac.check(); err != nil {
				return nil, err
			}
			pac.mutation = mutation
			node, err = pac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pac.hooks) - 1; i >= 0; i-- {
			mut = pac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PhoneAccountCreate) SaveX(ctx context.Context) *PhoneAccount {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (pac *PhoneAccountCreate) check() error {
	return nil
}

func (pac *PhoneAccountCreate) sqlSave(ctx context.Context) (*PhoneAccount, error) {
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (pac *PhoneAccountCreate) createSpec() (*PhoneAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &PhoneAccount{config: pac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: phoneaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: phoneaccount.FieldID,
			},
		}
	)
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.UserIdentity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: phoneaccount.FieldUserIdentity,
		})
		_node.UserIdentity = value
	}
	if value, ok := pac.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: phoneaccount.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: phoneaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: phoneaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: phoneaccount.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// PhoneAccountCreateBulk is the builder for creating a bulk of PhoneAccount entities.
type PhoneAccountCreateBulk struct {
	config
	builders []*PhoneAccountCreate
}

// Save creates the PhoneAccount entities in the database.
func (pacb *PhoneAccountCreateBulk) Save(ctx context.Context) ([]*PhoneAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PhoneAccount, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhoneAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation user %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (pacb *PhoneAccountCreateBulk) SaveX(ctx context.Context) []*PhoneAccount {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
