// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/thoohv5/template/internal/ent/phoneaccount"
	"github.com/thoohv5/template/internal/ent/predicate"
)

// PhoneAccountUpdate is the builder for updating PhoneAccount entities.
type PhoneAccountUpdate struct {
	config
	hooks      []Hook
	mutation   *PhoneAccountMutation
	predicates []predicate.PhoneAccount
}

// Where adds a new predicate for the builder.
func (pau *PhoneAccountUpdate) Where(ps ...predicate.PhoneAccount) *PhoneAccountUpdate {
	pau.predicates = append(pau.predicates, ps...)
	return pau
}

// SetUserIdentity sets the user_identity field.
func (pau *PhoneAccountUpdate) SetUserIdentity(s string) *PhoneAccountUpdate {
	pau.mutation.SetUserIdentity(s)
	return pau
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (pau *PhoneAccountUpdate) SetNillableUserIdentity(s *string) *PhoneAccountUpdate {
	if s != nil {
		pau.SetUserIdentity(*s)
	}
	return pau
}

// ClearUserIdentity clears the value of user_identity.
func (pau *PhoneAccountUpdate) ClearUserIdentity() *PhoneAccountUpdate {
	pau.mutation.ClearUserIdentity()
	return pau
}

// SetPhone sets the phone field.
func (pau *PhoneAccountUpdate) SetPhone(s string) *PhoneAccountUpdate {
	pau.mutation.SetPhone(s)
	return pau
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (pau *PhoneAccountUpdate) SetNillablePhone(s *string) *PhoneAccountUpdate {
	if s != nil {
		pau.SetPhone(*s)
	}
	return pau
}

// ClearPhone clears the value of phone.
func (pau *PhoneAccountUpdate) ClearPhone() *PhoneAccountUpdate {
	pau.mutation.ClearPhone()
	return pau
}

// SetCreatedAt sets the created_at field.
func (pau *PhoneAccountUpdate) SetCreatedAt(t time.Time) *PhoneAccountUpdate {
	pau.mutation.SetCreatedAt(t)
	return pau
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pau *PhoneAccountUpdate) SetNillableCreatedAt(t *time.Time) *PhoneAccountUpdate {
	if t != nil {
		pau.SetCreatedAt(*t)
	}
	return pau
}

// ClearCreatedAt clears the value of created_at.
func (pau *PhoneAccountUpdate) ClearCreatedAt() *PhoneAccountUpdate {
	pau.mutation.ClearCreatedAt()
	return pau
}

// SetUpdatedAt sets the updated_at field.
func (pau *PhoneAccountUpdate) SetUpdatedAt(t time.Time) *PhoneAccountUpdate {
	pau.mutation.SetUpdatedAt(t)
	return pau
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pau *PhoneAccountUpdate) SetNillableUpdatedAt(t *time.Time) *PhoneAccountUpdate {
	if t != nil {
		pau.SetUpdatedAt(*t)
	}
	return pau
}

// ClearUpdatedAt clears the value of updated_at.
func (pau *PhoneAccountUpdate) ClearUpdatedAt() *PhoneAccountUpdate {
	pau.mutation.ClearUpdatedAt()
	return pau
}

// SetDeletedAt sets the deleted_at field.
func (pau *PhoneAccountUpdate) SetDeletedAt(t time.Time) *PhoneAccountUpdate {
	pau.mutation.SetDeletedAt(t)
	return pau
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (pau *PhoneAccountUpdate) SetNillableDeletedAt(t *time.Time) *PhoneAccountUpdate {
	if t != nil {
		pau.SetDeletedAt(*t)
	}
	return pau
}

// ClearDeletedAt clears the value of deleted_at.
func (pau *PhoneAccountUpdate) ClearDeletedAt() *PhoneAccountUpdate {
	pau.mutation.ClearDeletedAt()
	return pau
}

// Mutation returns the PhoneAccountMutation object of the builder.
func (pau *PhoneAccountUpdate) Mutation() *PhoneAccountMutation {
	return pau.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pau *PhoneAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pau.hooks) == 0 {
		affected, err = pau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhoneAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pau.mutation = mutation
			affected, err = pau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pau.hooks) - 1; i >= 0; i-- {
			mut = pau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PhoneAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PhoneAccountUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PhoneAccountUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pau *PhoneAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   phoneaccount.Table,
			Columns: phoneaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: phoneaccount.FieldID,
			},
		},
	}
	if ps := pau.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.UserIdentity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: phoneaccount.FieldUserIdentity,
		})
	}
	if pau.mutation.UserIdentityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: phoneaccount.FieldUserIdentity,
		})
	}
	if value, ok := pau.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: phoneaccount.FieldPhone,
		})
	}
	if pau.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: phoneaccount.FieldPhone,
		})
	}
	if value, ok := pau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: phoneaccount.FieldCreatedAt,
		})
	}
	if pau.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: phoneaccount.FieldCreatedAt,
		})
	}
	if value, ok := pau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: phoneaccount.FieldUpdatedAt,
		})
	}
	if pau.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: phoneaccount.FieldUpdatedAt,
		})
	}
	if value, ok := pau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: phoneaccount.FieldDeletedAt,
		})
	}
	if pau.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: phoneaccount.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phoneaccount.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PhoneAccountUpdateOne is the builder for updating a single PhoneAccount entity.
type PhoneAccountUpdateOne struct {
	config
	hooks    []Hook
	mutation *PhoneAccountMutation
}

// SetUserIdentity sets the user_identity field.
func (pauo *PhoneAccountUpdateOne) SetUserIdentity(s string) *PhoneAccountUpdateOne {
	pauo.mutation.SetUserIdentity(s)
	return pauo
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (pauo *PhoneAccountUpdateOne) SetNillableUserIdentity(s *string) *PhoneAccountUpdateOne {
	if s != nil {
		pauo.SetUserIdentity(*s)
	}
	return pauo
}

// ClearUserIdentity clears the value of user_identity.
func (pauo *PhoneAccountUpdateOne) ClearUserIdentity() *PhoneAccountUpdateOne {
	pauo.mutation.ClearUserIdentity()
	return pauo
}

// SetPhone sets the phone field.
func (pauo *PhoneAccountUpdateOne) SetPhone(s string) *PhoneAccountUpdateOne {
	pauo.mutation.SetPhone(s)
	return pauo
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (pauo *PhoneAccountUpdateOne) SetNillablePhone(s *string) *PhoneAccountUpdateOne {
	if s != nil {
		pauo.SetPhone(*s)
	}
	return pauo
}

// ClearPhone clears the value of phone.
func (pauo *PhoneAccountUpdateOne) ClearPhone() *PhoneAccountUpdateOne {
	pauo.mutation.ClearPhone()
	return pauo
}

// SetCreatedAt sets the created_at field.
func (pauo *PhoneAccountUpdateOne) SetCreatedAt(t time.Time) *PhoneAccountUpdateOne {
	pauo.mutation.SetCreatedAt(t)
	return pauo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pauo *PhoneAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *PhoneAccountUpdateOne {
	if t != nil {
		pauo.SetCreatedAt(*t)
	}
	return pauo
}

// ClearCreatedAt clears the value of created_at.
func (pauo *PhoneAccountUpdateOne) ClearCreatedAt() *PhoneAccountUpdateOne {
	pauo.mutation.ClearCreatedAt()
	return pauo
}

// SetUpdatedAt sets the updated_at field.
func (pauo *PhoneAccountUpdateOne) SetUpdatedAt(t time.Time) *PhoneAccountUpdateOne {
	pauo.mutation.SetUpdatedAt(t)
	return pauo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pauo *PhoneAccountUpdateOne) SetNillableUpdatedAt(t *time.Time) *PhoneAccountUpdateOne {
	if t != nil {
		pauo.SetUpdatedAt(*t)
	}
	return pauo
}

// ClearUpdatedAt clears the value of updated_at.
func (pauo *PhoneAccountUpdateOne) ClearUpdatedAt() *PhoneAccountUpdateOne {
	pauo.mutation.ClearUpdatedAt()
	return pauo
}

// SetDeletedAt sets the deleted_at field.
func (pauo *PhoneAccountUpdateOne) SetDeletedAt(t time.Time) *PhoneAccountUpdateOne {
	pauo.mutation.SetDeletedAt(t)
	return pauo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (pauo *PhoneAccountUpdateOne) SetNillableDeletedAt(t *time.Time) *PhoneAccountUpdateOne {
	if t != nil {
		pauo.SetDeletedAt(*t)
	}
	return pauo
}

// ClearDeletedAt clears the value of deleted_at.
func (pauo *PhoneAccountUpdateOne) ClearDeletedAt() *PhoneAccountUpdateOne {
	pauo.mutation.ClearDeletedAt()
	return pauo
}

// Mutation returns the PhoneAccountMutation object of the builder.
func (pauo *PhoneAccountUpdateOne) Mutation() *PhoneAccountMutation {
	return pauo.mutation
}

// Save executes the query and returns the updated entity.
func (pauo *PhoneAccountUpdateOne) Save(ctx context.Context) (*PhoneAccount, error) {
	var (
		err  error
		node *PhoneAccount
	)
	if len(pauo.hooks) == 0 {
		node, err = pauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhoneAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pauo.mutation = mutation
			node, err = pauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pauo.hooks) - 1; i >= 0; i-- {
			mut = pauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PhoneAccountUpdateOne) SaveX(ctx context.Context) *PhoneAccount {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PhoneAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PhoneAccountUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pauo *PhoneAccountUpdateOne) sqlSave(ctx context.Context) (_node *PhoneAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   phoneaccount.Table,
			Columns: phoneaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: phoneaccount.FieldID,
			},
		},
	}
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PhoneAccount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := pauo.mutation.UserIdentity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: phoneaccount.FieldUserIdentity,
		})
	}
	if pauo.mutation.UserIdentityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: phoneaccount.FieldUserIdentity,
		})
	}
	if value, ok := pauo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: phoneaccount.FieldPhone,
		})
	}
	if pauo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: phoneaccount.FieldPhone,
		})
	}
	if value, ok := pauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: phoneaccount.FieldCreatedAt,
		})
	}
	if pauo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: phoneaccount.FieldCreatedAt,
		})
	}
	if value, ok := pauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: phoneaccount.FieldUpdatedAt,
		})
	}
	if pauo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: phoneaccount.FieldUpdatedAt,
		})
	}
	if value, ok := pauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: phoneaccount.FieldDeletedAt,
		})
	}
	if pauo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: phoneaccount.FieldDeletedAt,
		})
	}
	_node = &PhoneAccount{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phoneaccount.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
