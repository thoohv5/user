// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/thoohv5/template/internal/ent/useraccount"
)

// UserAccountCreate is the builder for creating a UserAccount entity.
type UserAccountCreate struct {
	config
	mutation *UserAccountMutation
	hooks    []Hook
}

// SetUserIdentity sets the user_identity field.
func (uac *UserAccountCreate) SetUserIdentity(s string) *UserAccountCreate {
	uac.mutation.SetUserIdentity(s)
	return uac
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableUserIdentity(s *string) *UserAccountCreate {
	if s != nil {
		uac.SetUserIdentity(*s)
	}
	return uac
}

// SetAccount sets the user field.
func (uac *UserAccountCreate) SetAccount(i int64) *UserAccountCreate {
	uac.mutation.SetAccount(i)
	return uac
}

// SetNillableAccount sets the user field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableAccount(i *int64) *UserAccountCreate {
	if i != nil {
		uac.SetAccount(*i)
	}
	return uac
}

// SetPassword sets the password field.
func (uac *UserAccountCreate) SetPassword(s string) *UserAccountCreate {
	uac.mutation.SetPassword(s)
	return uac
}

// SetNillablePassword sets the password field if the given value is not nil.
func (uac *UserAccountCreate) SetNillablePassword(s *string) *UserAccountCreate {
	if s != nil {
		uac.SetPassword(*s)
	}
	return uac
}

// SetSalt sets the salt field.
func (uac *UserAccountCreate) SetSalt(s string) *UserAccountCreate {
	uac.mutation.SetSalt(s)
	return uac
}

// SetNillableSalt sets the salt field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableSalt(s *string) *UserAccountCreate {
	if s != nil {
		uac.SetSalt(*s)
	}
	return uac
}

// SetCreatedAt sets the created_at field.
func (uac *UserAccountCreate) SetCreatedAt(t time.Time) *UserAccountCreate {
	uac.mutation.SetCreatedAt(t)
	return uac
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableCreatedAt(t *time.Time) *UserAccountCreate {
	if t != nil {
		uac.SetCreatedAt(*t)
	}
	return uac
}

// SetUpdatedAt sets the updated_at field.
func (uac *UserAccountCreate) SetUpdatedAt(t time.Time) *UserAccountCreate {
	uac.mutation.SetUpdatedAt(t)
	return uac
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableUpdatedAt(t *time.Time) *UserAccountCreate {
	if t != nil {
		uac.SetUpdatedAt(*t)
	}
	return uac
}

// SetDeletedAt sets the deleted_at field.
func (uac *UserAccountCreate) SetDeletedAt(t time.Time) *UserAccountCreate {
	uac.mutation.SetDeletedAt(t)
	return uac
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableDeletedAt(t *time.Time) *UserAccountCreate {
	if t != nil {
		uac.SetDeletedAt(*t)
	}
	return uac
}

// SetID sets the id field.
func (uac *UserAccountCreate) SetID(i int64) *UserAccountCreate {
	uac.mutation.SetID(i)
	return uac
}

// Mutation returns the UserAccountMutation object of the builder.
func (uac *UserAccountCreate) Mutation() *UserAccountMutation {
	return uac.mutation
}

// Save creates the UserAccount in the database.
func (uac *UserAccountCreate) Save(ctx context.Context) (*UserAccount, error) {
	var (
		err  error
		node *UserAccount
	)
	uac.defaults()
	if len(uac.hooks) == 0 {
		if err = uac.check(); err != nil {
			return nil, err
		}
		node, err = uac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation user %T", m)
			}
			if err = uac.check(); err != nil {
				return nil, err
			}
			uac.mutation = mutation
			node, err = uac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uac.hooks) - 1; i >= 0; i-- {
			mut = uac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAccountCreate) SaveX(ctx context.Context) *UserAccount {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (uac *UserAccountCreate) defaults() {
	if _, ok := uac.mutation.Password(); !ok {
		v := useraccount.DefaultPassword
		uac.mutation.SetPassword(v)
	}
	if _, ok := uac.mutation.Salt(); !ok {
		v := useraccount.DefaultSalt
		uac.mutation.SetSalt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserAccountCreate) check() error {
	if _, ok := uac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New("ent: missing required field \"password\"")}
	}
	if _, ok := uac.mutation.Salt(); !ok {
		return &ValidationError{Name: "salt", err: errors.New("ent: missing required field \"salt\"")}
	}
	return nil
}

func (uac *UserAccountCreate) sqlSave(ctx context.Context) (*UserAccount, error) {
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (uac *UserAccountCreate) createSpec() (*UserAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAccount{config: uac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: useraccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: useraccount.FieldID,
			},
		}
	)
	if id, ok := uac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uac.mutation.UserIdentity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraccount.FieldUserIdentity,
		})
		_node.UserIdentity = value
	}
	if value, ok := uac.mutation.Account(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useraccount.FieldAccount,
		})
		_node.Account = value
	}
	if value, ok := uac.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraccount.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := uac.mutation.Salt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraccount.FieldSalt,
		})
		_node.Salt = value
	}
	if value, ok := uac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := uac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraccount.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// UserAccountCreateBulk is the builder for creating a bulk of UserAccount entities.
type UserAccountCreateBulk struct {
	config
	builders []*UserAccountCreate
}

// Save creates the UserAccount entities in the database.
func (uacb *UserAccountCreateBulk) Save(ctx context.Context) ([]*UserAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserAccount, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation user %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (uacb *UserAccountCreateBulk) SaveX(ctx context.Context) []*UserAccount {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
