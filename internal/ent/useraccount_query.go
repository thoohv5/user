// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/thoohv5/template/internal/ent/predicate"
	"github.com/thoohv5/template/internal/ent/useraccount"
)

// UserAccountQuery is the builder for querying UserAccount entities.
type UserAccountQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.UserAccount
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (uaq *UserAccountQuery) Where(ps ...predicate.UserAccount) *UserAccountQuery {
	uaq.predicates = append(uaq.predicates, ps...)
	return uaq
}

// Limit adds a limit step to the query.
func (uaq *UserAccountQuery) Limit(limit int) *UserAccountQuery {
	uaq.limit = &limit
	return uaq
}

// Offset adds an offset step to the query.
func (uaq *UserAccountQuery) Offset(offset int) *UserAccountQuery {
	uaq.offset = &offset
	return uaq
}

// Order adds an order step to the query.
func (uaq *UserAccountQuery) Order(o ...OrderFunc) *UserAccountQuery {
	uaq.order = append(uaq.order, o...)
	return uaq
}

// First returns the first UserAccount entity in the query. Returns *NotFoundError when no useraccount was found.
func (uaq *UserAccountQuery) First(ctx context.Context) (*UserAccount, error) {
	nodes, err := uaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{useraccount.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uaq *UserAccountQuery) FirstX(ctx context.Context) *UserAccount {
	node, err := uaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserAccount id in the query. Returns *NotFoundError when no id was found.
func (uaq *UserAccountQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = uaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{useraccount.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (uaq *UserAccountQuery) FirstXID(ctx context.Context) int64 {
	id, err := uaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only UserAccount entity in the query, returns an error if not exactly one entity was returned.
func (uaq *UserAccountQuery) Only(ctx context.Context) (*UserAccount, error) {
	nodes, err := uaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{useraccount.Label}
	default:
		return nil, &NotSingularError{useraccount.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uaq *UserAccountQuery) OnlyX(ctx context.Context) *UserAccount {
	node, err := uaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only UserAccount id in the query, returns an error if not exactly one id was returned.
func (uaq *UserAccountQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = uaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{useraccount.Label}
	default:
		err = &NotSingularError{useraccount.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uaq *UserAccountQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := uaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserAccounts.
func (uaq *UserAccountQuery) All(ctx context.Context) ([]*UserAccount, error) {
	if err := uaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return uaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (uaq *UserAccountQuery) AllX(ctx context.Context) []*UserAccount {
	nodes, err := uaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserAccount ids.
func (uaq *UserAccountQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := uaq.Select(useraccount.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uaq *UserAccountQuery) IDsX(ctx context.Context) []int64 {
	ids, err := uaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uaq *UserAccountQuery) Count(ctx context.Context) (int, error) {
	if err := uaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return uaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (uaq *UserAccountQuery) CountX(ctx context.Context) int {
	count, err := uaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uaq *UserAccountQuery) Exist(ctx context.Context) (bool, error) {
	if err := uaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return uaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (uaq *UserAccountQuery) ExistX(ctx context.Context) bool {
	exist, err := uaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uaq *UserAccountQuery) Clone() *UserAccountQuery {
	return &UserAccountQuery{
		config:     uaq.config,
		limit:      uaq.limit,
		offset:     uaq.offset,
		order:      append([]OrderFunc{}, uaq.order...),
		unique:     append([]string{}, uaq.unique...),
		predicates: append([]predicate.UserAccount{}, uaq.predicates...),
		// clone intermediate query.
		sql:  uaq.sql.Clone(),
		path: uaq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// PostExample:
//
//	var v []struct {
//		UserIdentity string `json:"user_identity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserAccount.Query().
//		GroupBy(useraccount.FieldUserIdentity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (uaq *UserAccountQuery) GroupBy(field string, fields ...string) *UserAccountGroupBy {
	group := &UserAccountGroupBy{config: uaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uaq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// PostExample:
//
//	var v []struct {
//		UserIdentity string `json:"user_identity,omitempty"`
//	}
//
//	client.UserAccount.Query().
//		Select(useraccount.FieldUserIdentity).
//		Scan(ctx, &v)
//
func (uaq *UserAccountQuery) Select(field string, fields ...string) *UserAccountSelect {
	selector := &UserAccountSelect{config: uaq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uaq.sqlQuery(), nil
	}
	return selector
}

func (uaq *UserAccountQuery) prepareQuery(ctx context.Context) error {
	if uaq.path != nil {
		prev, err := uaq.path(ctx)
		if err != nil {
			return err
		}
		uaq.sql = prev
	}
	return nil
}

func (uaq *UserAccountQuery) sqlAll(ctx context.Context) ([]*UserAccount, error) {
	var (
		nodes = []*UserAccount{}
		_spec = uaq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &UserAccount{config: uaq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, uaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (uaq *UserAccountQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uaq.querySpec()
	return sqlgraph.CountNodes(ctx, uaq.driver, _spec)
}

func (uaq *UserAccountQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := uaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (uaq *UserAccountQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useraccount.Table,
			Columns: useraccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: useraccount.FieldID,
			},
		},
		From:   uaq.sql,
		Unique: true,
	}
	if ps := uaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, useraccount.ValidColumn)
			}
		}
	}
	return _spec
}

func (uaq *UserAccountQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(uaq.driver.Dialect())
	t1 := builder.Table(useraccount.Table)
	selector := builder.Select(t1.Columns(useraccount.Columns...)...).From(t1)
	if uaq.sql != nil {
		selector = uaq.sql
		selector.Select(selector.Columns(useraccount.Columns...)...)
	}
	for _, p := range uaq.predicates {
		p(selector)
	}
	for _, p := range uaq.order {
		p(selector, useraccount.ValidColumn)
	}
	if offset := uaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserAccountGroupBy is the builder for group-by UserAccount entities.
type UserAccountGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uagb *UserAccountGroupBy) Aggregate(fns ...AggregateFunc) *UserAccountGroupBy {
	uagb.fns = append(uagb.fns, fns...)
	return uagb
}

// Scan applies the group-by query and scan the result into the given value.
func (uagb *UserAccountGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := uagb.path(ctx)
	if err != nil {
		return err
	}
	uagb.sql = query
	return uagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uagb *UserAccountGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := uagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (uagb *UserAccountGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(uagb.fields) > 1 {
		return nil, errors.New("ent: UserAccountGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := uagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uagb *UserAccountGroupBy) StringsX(ctx context.Context) []string {
	v, err := uagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (uagb *UserAccountGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = uagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraccount.Label}
	default:
		err = fmt.Errorf("ent: UserAccountGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (uagb *UserAccountGroupBy) StringX(ctx context.Context) string {
	v, err := uagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (uagb *UserAccountGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(uagb.fields) > 1 {
		return nil, errors.New("ent: UserAccountGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := uagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uagb *UserAccountGroupBy) IntsX(ctx context.Context) []int {
	v, err := uagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (uagb *UserAccountGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = uagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraccount.Label}
	default:
		err = fmt.Errorf("ent: UserAccountGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (uagb *UserAccountGroupBy) IntX(ctx context.Context) int {
	v, err := uagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (uagb *UserAccountGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(uagb.fields) > 1 {
		return nil, errors.New("ent: UserAccountGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := uagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uagb *UserAccountGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := uagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (uagb *UserAccountGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = uagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraccount.Label}
	default:
		err = fmt.Errorf("ent: UserAccountGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (uagb *UserAccountGroupBy) Float64X(ctx context.Context) float64 {
	v, err := uagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (uagb *UserAccountGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(uagb.fields) > 1 {
		return nil, errors.New("ent: UserAccountGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := uagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uagb *UserAccountGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := uagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (uagb *UserAccountGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = uagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraccount.Label}
	default:
		err = fmt.Errorf("ent: UserAccountGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (uagb *UserAccountGroupBy) BoolX(ctx context.Context) bool {
	v, err := uagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uagb *UserAccountGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range uagb.fields {
		if !useraccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := uagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uagb *UserAccountGroupBy) sqlQuery() *sql.Selector {
	selector := uagb.sql
	columns := make([]string, 0, len(uagb.fields)+len(uagb.fns))
	columns = append(columns, uagb.fields...)
	for _, fn := range uagb.fns {
		columns = append(columns, fn(selector, useraccount.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(uagb.fields...)
}

// UserAccountSelect is the builder for select fields of UserAccount entities.
type UserAccountSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (uas *UserAccountSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := uas.path(ctx)
	if err != nil {
		return err
	}
	uas.sql = query
	return uas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uas *UserAccountSelect) ScanX(ctx context.Context, v interface{}) {
	if err := uas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (uas *UserAccountSelect) Strings(ctx context.Context) ([]string, error) {
	if len(uas.fields) > 1 {
		return nil, errors.New("ent: UserAccountSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := uas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uas *UserAccountSelect) StringsX(ctx context.Context) []string {
	v, err := uas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (uas *UserAccountSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = uas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraccount.Label}
	default:
		err = fmt.Errorf("ent: UserAccountSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (uas *UserAccountSelect) StringX(ctx context.Context) string {
	v, err := uas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (uas *UserAccountSelect) Ints(ctx context.Context) ([]int, error) {
	if len(uas.fields) > 1 {
		return nil, errors.New("ent: UserAccountSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := uas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uas *UserAccountSelect) IntsX(ctx context.Context) []int {
	v, err := uas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (uas *UserAccountSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = uas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraccount.Label}
	default:
		err = fmt.Errorf("ent: UserAccountSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (uas *UserAccountSelect) IntX(ctx context.Context) int {
	v, err := uas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (uas *UserAccountSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(uas.fields) > 1 {
		return nil, errors.New("ent: UserAccountSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := uas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uas *UserAccountSelect) Float64sX(ctx context.Context) []float64 {
	v, err := uas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (uas *UserAccountSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = uas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraccount.Label}
	default:
		err = fmt.Errorf("ent: UserAccountSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (uas *UserAccountSelect) Float64X(ctx context.Context) float64 {
	v, err := uas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (uas *UserAccountSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(uas.fields) > 1 {
		return nil, errors.New("ent: UserAccountSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := uas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uas *UserAccountSelect) BoolsX(ctx context.Context) []bool {
	v, err := uas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (uas *UserAccountSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = uas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{useraccount.Label}
	default:
		err = fmt.Errorf("ent: UserAccountSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (uas *UserAccountSelect) BoolX(ctx context.Context) bool {
	v, err := uas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uas *UserAccountSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range uas.fields {
		if !useraccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := uas.sqlQuery().Query()
	if err := uas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uas *UserAccountSelect) sqlQuery() sql.Querier {
	selector := uas.sql
	selector.Select(selector.Columns(uas.fields...)...)
	return selector
}
