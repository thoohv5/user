// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/thoohv5/template/internal/ent/predicate"
	"github.com/thoohv5/template/internal/ent/useraccount"
)

// UserAccountUpdate is the builder for updating UserAccount entities.
type UserAccountUpdate struct {
	config
	hooks      []Hook
	mutation   *UserAccountMutation
	predicates []predicate.UserAccount
}

// Where adds a new predicate for the builder.
func (uau *UserAccountUpdate) Where(ps ...predicate.UserAccount) *UserAccountUpdate {
	uau.predicates = append(uau.predicates, ps...)
	return uau
}

// SetUserIdentity sets the user_identity field.
func (uau *UserAccountUpdate) SetUserIdentity(s string) *UserAccountUpdate {
	uau.mutation.SetUserIdentity(s)
	return uau
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableUserIdentity(s *string) *UserAccountUpdate {
	if s != nil {
		uau.SetUserIdentity(*s)
	}
	return uau
}

// ClearUserIdentity clears the value of user_identity.
func (uau *UserAccountUpdate) ClearUserIdentity() *UserAccountUpdate {
	uau.mutation.ClearUserIdentity()
	return uau
}

// SetAccount sets the account field.
func (uau *UserAccountUpdate) SetAccount(i int64) *UserAccountUpdate {
	uau.mutation.ResetAccount()
	uau.mutation.SetAccount(i)
	return uau
}

// SetNillableAccount sets the account field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableAccount(i *int64) *UserAccountUpdate {
	if i != nil {
		uau.SetAccount(*i)
	}
	return uau
}

// AddAccount adds i to account.
func (uau *UserAccountUpdate) AddAccount(i int64) *UserAccountUpdate {
	uau.mutation.AddAccount(i)
	return uau
}

// ClearAccount clears the value of account.
func (uau *UserAccountUpdate) ClearAccount() *UserAccountUpdate {
	uau.mutation.ClearAccount()
	return uau
}

// SetPassword sets the password field.
func (uau *UserAccountUpdate) SetPassword(s string) *UserAccountUpdate {
	uau.mutation.SetPassword(s)
	return uau
}

// SetNillablePassword sets the password field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillablePassword(s *string) *UserAccountUpdate {
	if s != nil {
		uau.SetPassword(*s)
	}
	return uau
}

// SetSalt sets the salt field.
func (uau *UserAccountUpdate) SetSalt(s string) *UserAccountUpdate {
	uau.mutation.SetSalt(s)
	return uau
}

// SetNillableSalt sets the salt field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableSalt(s *string) *UserAccountUpdate {
	if s != nil {
		uau.SetSalt(*s)
	}
	return uau
}

// SetCreatedAt sets the created_at field.
func (uau *UserAccountUpdate) SetCreatedAt(t time.Time) *UserAccountUpdate {
	uau.mutation.SetCreatedAt(t)
	return uau
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableCreatedAt(t *time.Time) *UserAccountUpdate {
	if t != nil {
		uau.SetCreatedAt(*t)
	}
	return uau
}

// ClearCreatedAt clears the value of created_at.
func (uau *UserAccountUpdate) ClearCreatedAt() *UserAccountUpdate {
	uau.mutation.ClearCreatedAt()
	return uau
}

// SetUpdatedAt sets the updated_at field.
func (uau *UserAccountUpdate) SetUpdatedAt(t time.Time) *UserAccountUpdate {
	uau.mutation.SetUpdatedAt(t)
	return uau
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableUpdatedAt(t *time.Time) *UserAccountUpdate {
	if t != nil {
		uau.SetUpdatedAt(*t)
	}
	return uau
}

// ClearUpdatedAt clears the value of updated_at.
func (uau *UserAccountUpdate) ClearUpdatedAt() *UserAccountUpdate {
	uau.mutation.ClearUpdatedAt()
	return uau
}

// SetDeletedAt sets the deleted_at field.
func (uau *UserAccountUpdate) SetDeletedAt(t time.Time) *UserAccountUpdate {
	uau.mutation.SetDeletedAt(t)
	return uau
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableDeletedAt(t *time.Time) *UserAccountUpdate {
	if t != nil {
		uau.SetDeletedAt(*t)
	}
	return uau
}

// ClearDeletedAt clears the value of deleted_at.
func (uau *UserAccountUpdate) ClearDeletedAt() *UserAccountUpdate {
	uau.mutation.ClearDeletedAt()
	return uau
}

// Mutation returns the UserAccountMutation object of the builder.
func (uau *UserAccountUpdate) Mutation() *UserAccountMutation {
	return uau.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uau *UserAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uau.hooks) == 0 {
		affected, err = uau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uau.mutation = mutation
			affected, err = uau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uau.hooks) - 1; i >= 0; i-- {
			mut = uau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserAccountUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserAccountUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uau *UserAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useraccount.Table,
			Columns: useraccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: useraccount.FieldID,
			},
		},
	}
	if ps := uau.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.UserIdentity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraccount.FieldUserIdentity,
		})
	}
	if uau.mutation.UserIdentityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: useraccount.FieldUserIdentity,
		})
	}
	if value, ok := uau.mutation.Account(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useraccount.FieldAccount,
		})
	}
	if value, ok := uau.mutation.AddedAccount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useraccount.FieldAccount,
		})
	}
	if uau.mutation.AccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useraccount.FieldAccount,
		})
	}
	if value, ok := uau.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraccount.FieldPassword,
		})
	}
	if value, ok := uau.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraccount.FieldSalt,
		})
	}
	if value, ok := uau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraccount.FieldCreatedAt,
		})
	}
	if uau.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraccount.FieldCreatedAt,
		})
	}
	if value, ok := uau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraccount.FieldUpdatedAt,
		})
	}
	if uau.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraccount.FieldUpdatedAt,
		})
	}
	if value, ok := uau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraccount.FieldDeletedAt,
		})
	}
	if uau.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraccount.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraccount.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserAccountUpdateOne is the builder for updating a single UserAccount entity.
type UserAccountUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserAccountMutation
}

// SetUserIdentity sets the user_identity field.
func (uauo *UserAccountUpdateOne) SetUserIdentity(s string) *UserAccountUpdateOne {
	uauo.mutation.SetUserIdentity(s)
	return uauo
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableUserIdentity(s *string) *UserAccountUpdateOne {
	if s != nil {
		uauo.SetUserIdentity(*s)
	}
	return uauo
}

// ClearUserIdentity clears the value of user_identity.
func (uauo *UserAccountUpdateOne) ClearUserIdentity() *UserAccountUpdateOne {
	uauo.mutation.ClearUserIdentity()
	return uauo
}

// SetAccount sets the account field.
func (uauo *UserAccountUpdateOne) SetAccount(i int64) *UserAccountUpdateOne {
	uauo.mutation.ResetAccount()
	uauo.mutation.SetAccount(i)
	return uauo
}

// SetNillableAccount sets the account field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableAccount(i *int64) *UserAccountUpdateOne {
	if i != nil {
		uauo.SetAccount(*i)
	}
	return uauo
}

// AddAccount adds i to account.
func (uauo *UserAccountUpdateOne) AddAccount(i int64) *UserAccountUpdateOne {
	uauo.mutation.AddAccount(i)
	return uauo
}

// ClearAccount clears the value of account.
func (uauo *UserAccountUpdateOne) ClearAccount() *UserAccountUpdateOne {
	uauo.mutation.ClearAccount()
	return uauo
}

// SetPassword sets the password field.
func (uauo *UserAccountUpdateOne) SetPassword(s string) *UserAccountUpdateOne {
	uauo.mutation.SetPassword(s)
	return uauo
}

// SetNillablePassword sets the password field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillablePassword(s *string) *UserAccountUpdateOne {
	if s != nil {
		uauo.SetPassword(*s)
	}
	return uauo
}

// SetSalt sets the salt field.
func (uauo *UserAccountUpdateOne) SetSalt(s string) *UserAccountUpdateOne {
	uauo.mutation.SetSalt(s)
	return uauo
}

// SetNillableSalt sets the salt field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableSalt(s *string) *UserAccountUpdateOne {
	if s != nil {
		uauo.SetSalt(*s)
	}
	return uauo
}

// SetCreatedAt sets the created_at field.
func (uauo *UserAccountUpdateOne) SetCreatedAt(t time.Time) *UserAccountUpdateOne {
	uauo.mutation.SetCreatedAt(t)
	return uauo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *UserAccountUpdateOne {
	if t != nil {
		uauo.SetCreatedAt(*t)
	}
	return uauo
}

// ClearCreatedAt clears the value of created_at.
func (uauo *UserAccountUpdateOne) ClearCreatedAt() *UserAccountUpdateOne {
	uauo.mutation.ClearCreatedAt()
	return uauo
}

// SetUpdatedAt sets the updated_at field.
func (uauo *UserAccountUpdateOne) SetUpdatedAt(t time.Time) *UserAccountUpdateOne {
	uauo.mutation.SetUpdatedAt(t)
	return uauo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserAccountUpdateOne {
	if t != nil {
		uauo.SetUpdatedAt(*t)
	}
	return uauo
}

// ClearUpdatedAt clears the value of updated_at.
func (uauo *UserAccountUpdateOne) ClearUpdatedAt() *UserAccountUpdateOne {
	uauo.mutation.ClearUpdatedAt()
	return uauo
}

// SetDeletedAt sets the deleted_at field.
func (uauo *UserAccountUpdateOne) SetDeletedAt(t time.Time) *UserAccountUpdateOne {
	uauo.mutation.SetDeletedAt(t)
	return uauo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableDeletedAt(t *time.Time) *UserAccountUpdateOne {
	if t != nil {
		uauo.SetDeletedAt(*t)
	}
	return uauo
}

// ClearDeletedAt clears the value of deleted_at.
func (uauo *UserAccountUpdateOne) ClearDeletedAt() *UserAccountUpdateOne {
	uauo.mutation.ClearDeletedAt()
	return uauo
}

// Mutation returns the UserAccountMutation object of the builder.
func (uauo *UserAccountUpdateOne) Mutation() *UserAccountMutation {
	return uauo.mutation
}

// Save executes the query and returns the updated entity.
func (uauo *UserAccountUpdateOne) Save(ctx context.Context) (*UserAccount, error) {
	var (
		err  error
		node *UserAccount
	)
	if len(uauo.hooks) == 0 {
		node, err = uauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uauo.mutation = mutation
			node, err = uauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uauo.hooks) - 1; i >= 0; i-- {
			mut = uauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserAccountUpdateOne) SaveX(ctx context.Context) *UserAccount {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserAccountUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uauo *UserAccountUpdateOne) sqlSave(ctx context.Context) (_node *UserAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useraccount.Table,
			Columns: useraccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: useraccount.FieldID,
			},
		},
	}
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserAccount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uauo.mutation.UserIdentity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraccount.FieldUserIdentity,
		})
	}
	if uauo.mutation.UserIdentityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: useraccount.FieldUserIdentity,
		})
	}
	if value, ok := uauo.mutation.Account(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useraccount.FieldAccount,
		})
	}
	if value, ok := uauo.mutation.AddedAccount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useraccount.FieldAccount,
		})
	}
	if uauo.mutation.AccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useraccount.FieldAccount,
		})
	}
	if value, ok := uauo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraccount.FieldPassword,
		})
	}
	if value, ok := uauo.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useraccount.FieldSalt,
		})
	}
	if value, ok := uauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraccount.FieldCreatedAt,
		})
	}
	if uauo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraccount.FieldCreatedAt,
		})
	}
	if value, ok := uauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraccount.FieldUpdatedAt,
		})
	}
	if uauo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraccount.FieldUpdatedAt,
		})
	}
	if value, ok := uauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useraccount.FieldDeletedAt,
		})
	}
	if uauo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useraccount.FieldDeletedAt,
		})
	}
	_node = &UserAccount{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraccount.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
