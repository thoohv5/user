// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/thoohv5/template/internal/ent/userextend"
)

// UserExtend is the model entity for the UserExtend schema.
type UserExtend struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserIdentity holds the value of the "user_identity" field.
	UserIdentity string `json:"user_identity,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserExtend) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // user_identity
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullTime{},   // deleted_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserExtend fields.
func (ue *UserExtend) assignValues(values ...interface{}) error {
	if m, n := len(values), len(userextend.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected user %T for field id", value)
	}
	ue.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected user %T for field user_identity", values[0])
	} else if value.Valid {
		ue.UserIdentity = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected user %T for field created_at", values[1])
	} else if value.Valid {
		ue.CreatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected user %T for field updated_at", values[2])
	} else if value.Valid {
		ue.UpdatedAt = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected user %T for field deleted_at", values[3])
	} else if value.Valid {
		ue.DeletedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this UserExtend.
// Note that, you need to call UserExtend.Unwrap() before calling this method, if this UserExtend
// was returned from a transaction, and the transaction was committed or rolled back.
func (ue *UserExtend) Update() *UserExtendUpdateOne {
	return (&UserExtendClient{config: ue.config}).UpdateOne(ue)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ue *UserExtend) Unwrap() *UserExtend {
	tx, ok := ue.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserExtend is not a transactional entity")
	}
	ue.config.driver = tx.drv
	return ue
}

// String implements the fmt.Stringer.
func (ue *UserExtend) String() string {
	var builder strings.Builder
	builder.WriteString("UserExtend(")
	builder.WriteString(fmt.Sprintf("id=%v", ue.ID))
	builder.WriteString(", user_identity=")
	builder.WriteString(ue.UserIdentity)
	builder.WriteString(", created_at=")
	builder.WriteString(ue.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ue.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(ue.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserExtends is a parsable slice of UserExtend.
type UserExtends []*UserExtend

func (ue UserExtends) config(cfg config) {
	for _i := range ue {
		ue[_i].config = cfg
	}
}
