// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/thoohv5/template/internal/ent/userextend"
)

// UserExtendCreate is the builder for creating a UserExtend entity.
type UserExtendCreate struct {
	config
	mutation *UserExtendMutation
	hooks    []Hook
}

// SetUserIdentity sets the user_identity field.
func (uec *UserExtendCreate) SetUserIdentity(s string) *UserExtendCreate {
	uec.mutation.SetUserIdentity(s)
	return uec
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableUserIdentity(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetUserIdentity(*s)
	}
	return uec
}

// SetCreatedAt sets the created_at field.
func (uec *UserExtendCreate) SetCreatedAt(t time.Time) *UserExtendCreate {
	uec.mutation.SetCreatedAt(t)
	return uec
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableCreatedAt(t *time.Time) *UserExtendCreate {
	if t != nil {
		uec.SetCreatedAt(*t)
	}
	return uec
}

// SetUpdatedAt sets the updated_at field.
func (uec *UserExtendCreate) SetUpdatedAt(t time.Time) *UserExtendCreate {
	uec.mutation.SetUpdatedAt(t)
	return uec
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableUpdatedAt(t *time.Time) *UserExtendCreate {
	if t != nil {
		uec.SetUpdatedAt(*t)
	}
	return uec
}

// SetDeletedAt sets the deleted_at field.
func (uec *UserExtendCreate) SetDeletedAt(t time.Time) *UserExtendCreate {
	uec.mutation.SetDeletedAt(t)
	return uec
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableDeletedAt(t *time.Time) *UserExtendCreate {
	if t != nil {
		uec.SetDeletedAt(*t)
	}
	return uec
}

// SetID sets the id field.
func (uec *UserExtendCreate) SetID(i int64) *UserExtendCreate {
	uec.mutation.SetID(i)
	return uec
}

// Mutation returns the UserExtendMutation object of the builder.
func (uec *UserExtendCreate) Mutation() *UserExtendMutation {
	return uec.mutation
}

// Save creates the UserExtend in the database.
func (uec *UserExtendCreate) Save(ctx context.Context) (*UserExtend, error) {
	var (
		err  error
		node *UserExtend
	)
	if len(uec.hooks) == 0 {
		if err = uec.check(); err != nil {
			return nil, err
		}
		node, err = uec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserExtendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation user %T", m)
			}
			if err = uec.check(); err != nil {
				return nil, err
			}
			uec.mutation = mutation
			node, err = uec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uec.hooks) - 1; i >= 0; i-- {
			mut = uec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uec *UserExtendCreate) SaveX(ctx context.Context) *UserExtend {
	v, err := uec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (uec *UserExtendCreate) check() error {
	return nil
}

func (uec *UserExtendCreate) sqlSave(ctx context.Context) (*UserExtend, error) {
	_node, _spec := uec.createSpec()
	if err := sqlgraph.CreateNode(ctx, uec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (uec *UserExtendCreate) createSpec() (*UserExtend, *sqlgraph.CreateSpec) {
	var (
		_node = &UserExtend{config: uec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userextend.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userextend.FieldID,
			},
		}
	)
	if id, ok := uec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uec.mutation.UserIdentity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldUserIdentity,
		})
		_node.UserIdentity = value
	}
	if value, ok := uec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := uec.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// UserExtendCreateBulk is the builder for creating a bulk of UserExtend entities.
type UserExtendCreateBulk struct {
	config
	builders []*UserExtendCreate
}

// Save creates the UserExtend entities in the database.
func (uecb *UserExtendCreateBulk) Save(ctx context.Context) ([]*UserExtend, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uecb.builders))
	nodes := make([]*UserExtend, len(uecb.builders))
	mutators := make([]Mutator, len(uecb.builders))
	for i := range uecb.builders {
		func(i int, root context.Context) {
			builder := uecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserExtendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation user %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (uecb *UserExtendCreateBulk) SaveX(ctx context.Context) []*UserExtend {
	v, err := uecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
