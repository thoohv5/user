// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/thoohv5/template/internal/ent/predicate"
	"github.com/thoohv5/template/internal/ent/userextend"
)

// UserExtendUpdate is the builder for updating UserExtend entities.
type UserExtendUpdate struct {
	config
	hooks      []Hook
	mutation   *UserExtendMutation
	predicates []predicate.UserExtend
}

// Where adds a new predicate for the builder.
func (ueu *UserExtendUpdate) Where(ps ...predicate.UserExtend) *UserExtendUpdate {
	ueu.predicates = append(ueu.predicates, ps...)
	return ueu
}

// SetUserIdentity sets the user_identity field.
func (ueu *UserExtendUpdate) SetUserIdentity(s string) *UserExtendUpdate {
	ueu.mutation.SetUserIdentity(s)
	return ueu
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (ueu *UserExtendUpdate) SetNillableUserIdentity(s *string) *UserExtendUpdate {
	if s != nil {
		ueu.SetUserIdentity(*s)
	}
	return ueu
}

// ClearUserIdentity clears the value of user_identity.
func (ueu *UserExtendUpdate) ClearUserIdentity() *UserExtendUpdate {
	ueu.mutation.ClearUserIdentity()
	return ueu
}

// SetCreatedAt sets the created_at field.
func (ueu *UserExtendUpdate) SetCreatedAt(t time.Time) *UserExtendUpdate {
	ueu.mutation.SetCreatedAt(t)
	return ueu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ueu *UserExtendUpdate) SetNillableCreatedAt(t *time.Time) *UserExtendUpdate {
	if t != nil {
		ueu.SetCreatedAt(*t)
	}
	return ueu
}

// ClearCreatedAt clears the value of created_at.
func (ueu *UserExtendUpdate) ClearCreatedAt() *UserExtendUpdate {
	ueu.mutation.ClearCreatedAt()
	return ueu
}

// SetUpdatedAt sets the updated_at field.
func (ueu *UserExtendUpdate) SetUpdatedAt(t time.Time) *UserExtendUpdate {
	ueu.mutation.SetUpdatedAt(t)
	return ueu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ueu *UserExtendUpdate) SetNillableUpdatedAt(t *time.Time) *UserExtendUpdate {
	if t != nil {
		ueu.SetUpdatedAt(*t)
	}
	return ueu
}

// ClearUpdatedAt clears the value of updated_at.
func (ueu *UserExtendUpdate) ClearUpdatedAt() *UserExtendUpdate {
	ueu.mutation.ClearUpdatedAt()
	return ueu
}

// SetDeletedAt sets the deleted_at field.
func (ueu *UserExtendUpdate) SetDeletedAt(t time.Time) *UserExtendUpdate {
	ueu.mutation.SetDeletedAt(t)
	return ueu
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (ueu *UserExtendUpdate) SetNillableDeletedAt(t *time.Time) *UserExtendUpdate {
	if t != nil {
		ueu.SetDeletedAt(*t)
	}
	return ueu
}

// ClearDeletedAt clears the value of deleted_at.
func (ueu *UserExtendUpdate) ClearDeletedAt() *UserExtendUpdate {
	ueu.mutation.ClearDeletedAt()
	return ueu
}

// Mutation returns the UserExtendMutation object of the builder.
func (ueu *UserExtendUpdate) Mutation() *UserExtendMutation {
	return ueu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ueu *UserExtendUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ueu.hooks) == 0 {
		affected, err = ueu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserExtendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation user %T", m)
			}
			ueu.mutation = mutation
			affected, err = ueu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ueu.hooks) - 1; i >= 0; i-- {
			mut = ueu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ueu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ueu *UserExtendUpdate) SaveX(ctx context.Context) int {
	affected, err := ueu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ueu *UserExtendUpdate) Exec(ctx context.Context) error {
	_, err := ueu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueu *UserExtendUpdate) ExecX(ctx context.Context) {
	if err := ueu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueu *UserExtendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userextend.Table,
			Columns: userextend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userextend.FieldID,
			},
		},
	}
	if ps := ueu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueu.mutation.UserIdentity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldUserIdentity,
		})
	}
	if ueu.mutation.UserIdentityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userextend.FieldUserIdentity,
		})
	}
	if value, ok := ueu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldCreatedAt,
		})
	}
	if ueu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userextend.FieldCreatedAt,
		})
	}
	if value, ok := ueu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldUpdatedAt,
		})
	}
	if ueu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userextend.FieldUpdatedAt,
		})
	}
	if value, ok := ueu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldDeletedAt,
		})
	}
	if ueu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userextend.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ueu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userextend.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserExtendUpdateOne is the builder for updating a single UserExtend entity.
type UserExtendUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserExtendMutation
}

// SetUserIdentity sets the user_identity field.
func (ueuo *UserExtendUpdateOne) SetUserIdentity(s string) *UserExtendUpdateOne {
	ueuo.mutation.SetUserIdentity(s)
	return ueuo
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (ueuo *UserExtendUpdateOne) SetNillableUserIdentity(s *string) *UserExtendUpdateOne {
	if s != nil {
		ueuo.SetUserIdentity(*s)
	}
	return ueuo
}

// ClearUserIdentity clears the value of user_identity.
func (ueuo *UserExtendUpdateOne) ClearUserIdentity() *UserExtendUpdateOne {
	ueuo.mutation.ClearUserIdentity()
	return ueuo
}

// SetCreatedAt sets the created_at field.
func (ueuo *UserExtendUpdateOne) SetCreatedAt(t time.Time) *UserExtendUpdateOne {
	ueuo.mutation.SetCreatedAt(t)
	return ueuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ueuo *UserExtendUpdateOne) SetNillableCreatedAt(t *time.Time) *UserExtendUpdateOne {
	if t != nil {
		ueuo.SetCreatedAt(*t)
	}
	return ueuo
}

// ClearCreatedAt clears the value of created_at.
func (ueuo *UserExtendUpdateOne) ClearCreatedAt() *UserExtendUpdateOne {
	ueuo.mutation.ClearCreatedAt()
	return ueuo
}

// SetUpdatedAt sets the updated_at field.
func (ueuo *UserExtendUpdateOne) SetUpdatedAt(t time.Time) *UserExtendUpdateOne {
	ueuo.mutation.SetUpdatedAt(t)
	return ueuo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ueuo *UserExtendUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserExtendUpdateOne {
	if t != nil {
		ueuo.SetUpdatedAt(*t)
	}
	return ueuo
}

// ClearUpdatedAt clears the value of updated_at.
func (ueuo *UserExtendUpdateOne) ClearUpdatedAt() *UserExtendUpdateOne {
	ueuo.mutation.ClearUpdatedAt()
	return ueuo
}

// SetDeletedAt sets the deleted_at field.
func (ueuo *UserExtendUpdateOne) SetDeletedAt(t time.Time) *UserExtendUpdateOne {
	ueuo.mutation.SetDeletedAt(t)
	return ueuo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (ueuo *UserExtendUpdateOne) SetNillableDeletedAt(t *time.Time) *UserExtendUpdateOne {
	if t != nil {
		ueuo.SetDeletedAt(*t)
	}
	return ueuo
}

// ClearDeletedAt clears the value of deleted_at.
func (ueuo *UserExtendUpdateOne) ClearDeletedAt() *UserExtendUpdateOne {
	ueuo.mutation.ClearDeletedAt()
	return ueuo
}

// Mutation returns the UserExtendMutation object of the builder.
func (ueuo *UserExtendUpdateOne) Mutation() *UserExtendMutation {
	return ueuo.mutation
}

// Save executes the query and returns the updated entity.
func (ueuo *UserExtendUpdateOne) Save(ctx context.Context) (*UserExtend, error) {
	var (
		err  error
		node *UserExtend
	)
	if len(ueuo.hooks) == 0 {
		node, err = ueuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserExtendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation user %T", m)
			}
			ueuo.mutation = mutation
			node, err = ueuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ueuo.hooks) - 1; i >= 0; i-- {
			mut = ueuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ueuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ueuo *UserExtendUpdateOne) SaveX(ctx context.Context) *UserExtend {
	node, err := ueuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ueuo *UserExtendUpdateOne) Exec(ctx context.Context) error {
	_, err := ueuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueuo *UserExtendUpdateOne) ExecX(ctx context.Context) {
	if err := ueuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueuo *UserExtendUpdateOne) sqlSave(ctx context.Context) (_node *UserExtend, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userextend.Table,
			Columns: userextend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userextend.FieldID,
			},
		},
	}
	id, ok := ueuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserExtend.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ueuo.mutation.UserIdentity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldUserIdentity,
		})
	}
	if ueuo.mutation.UserIdentityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userextend.FieldUserIdentity,
		})
	}
	if value, ok := ueuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldCreatedAt,
		})
	}
	if ueuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userextend.FieldCreatedAt,
		})
	}
	if value, ok := ueuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldUpdatedAt,
		})
	}
	if ueuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userextend.FieldUpdatedAt,
		})
	}
	if value, ok := ueuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldDeletedAt,
		})
	}
	if ueuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userextend.FieldDeletedAt,
		})
	}
	_node = &UserExtend{config: ueuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ueuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userextend.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
