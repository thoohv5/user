// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/thoohv5/template/internal/ent/userinfo"
)

// UserInfo is the model entity for the UserInfo schema.
type UserInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserIdentity holds the value of the "user_identity" field.
	UserIdentity string `json:"user_identity,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel int32 `json:"channel,omitempty"`
	// Form holds the value of the "form" field.
	Form int32 `json:"form,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserInfo) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // user_identity
		&sql.NullInt64{},  // channel
		&sql.NullInt64{},  // form
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullTime{},   // deleted_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserInfo fields.
func (ui *UserInfo) assignValues(values ...interface{}) error {
	if m, n := len(values), len(userinfo.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected user %T for field id", value)
	}
	ui.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected user %T for field user_identity", values[0])
	} else if value.Valid {
		ui.UserIdentity = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected user %T for field channel", values[1])
	} else if value.Valid {
		ui.Channel = int32(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected user %T for field form", values[2])
	} else if value.Valid {
		ui.Form = int32(value.Int64)
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected user %T for field created_at", values[3])
	} else if value.Valid {
		ui.CreatedAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected user %T for field updated_at", values[4])
	} else if value.Valid {
		ui.UpdatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected user %T for field deleted_at", values[5])
	} else if value.Valid {
		ui.DeletedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this UserInfo.
// Note that, you need to call UserInfo.Unwrap() before calling this method, if this UserInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ui *UserInfo) Update() *UserInfoUpdateOne {
	return (&UserInfoClient{config: ui.config}).UpdateOne(ui)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ui *UserInfo) Unwrap() *UserInfo {
	tx, ok := ui.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserInfo is not a transactional entity")
	}
	ui.config.driver = tx.drv
	return ui
}

// String implements the fmt.Stringer.
func (ui *UserInfo) String() string {
	var builder strings.Builder
	builder.WriteString("UserInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", ui.ID))
	builder.WriteString(", user_identity=")
	builder.WriteString(ui.UserIdentity)
	builder.WriteString(", channel=")
	builder.WriteString(fmt.Sprintf("%v", ui.Channel))
	builder.WriteString(", form=")
	builder.WriteString(fmt.Sprintf("%v", ui.Form))
	builder.WriteString(", created_at=")
	builder.WriteString(ui.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ui.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(ui.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserInfos is a parsable slice of UserInfo.
type UserInfos []*UserInfo

func (ui UserInfos) config(cfg config) {
	for _i := range ui {
		ui[_i].config = cfg
	}
}
