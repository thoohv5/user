// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/thoohv5/template/internal/ent/predicate"
	"github.com/thoohv5/template/internal/ent/userinfo"
)

// UserInfoUpdate is the builder for updating UserInfo entities.
type UserInfoUpdate struct {
	config
	hooks      []Hook
	mutation   *UserInfoMutation
	predicates []predicate.UserInfo
}

// Where adds a new predicate for the builder.
func (uiu *UserInfoUpdate) Where(ps ...predicate.UserInfo) *UserInfoUpdate {
	uiu.predicates = append(uiu.predicates, ps...)
	return uiu
}

// SetUserIdentity sets the user_identity field.
func (uiu *UserInfoUpdate) SetUserIdentity(s string) *UserInfoUpdate {
	uiu.mutation.SetUserIdentity(s)
	return uiu
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableUserIdentity(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetUserIdentity(*s)
	}
	return uiu
}

// ClearUserIdentity clears the value of user_identity.
func (uiu *UserInfoUpdate) ClearUserIdentity() *UserInfoUpdate {
	uiu.mutation.ClearUserIdentity()
	return uiu
}

// SetChannel sets the channel field.
func (uiu *UserInfoUpdate) SetChannel(i int32) *UserInfoUpdate {
	uiu.mutation.ResetChannel()
	uiu.mutation.SetChannel(i)
	return uiu
}

// SetNillableChannel sets the channel field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableChannel(i *int32) *UserInfoUpdate {
	if i != nil {
		uiu.SetChannel(*i)
	}
	return uiu
}

// AddChannel adds i to channel.
func (uiu *UserInfoUpdate) AddChannel(i int32) *UserInfoUpdate {
	uiu.mutation.AddChannel(i)
	return uiu
}

// SetForm sets the form field.
func (uiu *UserInfoUpdate) SetForm(i int32) *UserInfoUpdate {
	uiu.mutation.ResetForm()
	uiu.mutation.SetForm(i)
	return uiu
}

// SetNillableForm sets the form field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableForm(i *int32) *UserInfoUpdate {
	if i != nil {
		uiu.SetForm(*i)
	}
	return uiu
}

// AddForm adds i to form.
func (uiu *UserInfoUpdate) AddForm(i int32) *UserInfoUpdate {
	uiu.mutation.AddForm(i)
	return uiu
}

// SetCreatedAt sets the created_at field.
func (uiu *UserInfoUpdate) SetCreatedAt(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetCreatedAt(t)
	return uiu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableCreatedAt(t *time.Time) *UserInfoUpdate {
	if t != nil {
		uiu.SetCreatedAt(*t)
	}
	return uiu
}

// ClearCreatedAt clears the value of created_at.
func (uiu *UserInfoUpdate) ClearCreatedAt() *UserInfoUpdate {
	uiu.mutation.ClearCreatedAt()
	return uiu
}

// SetUpdatedAt sets the updated_at field.
func (uiu *UserInfoUpdate) SetUpdatedAt(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetUpdatedAt(t)
	return uiu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableUpdatedAt(t *time.Time) *UserInfoUpdate {
	if t != nil {
		uiu.SetUpdatedAt(*t)
	}
	return uiu
}

// ClearUpdatedAt clears the value of updated_at.
func (uiu *UserInfoUpdate) ClearUpdatedAt() *UserInfoUpdate {
	uiu.mutation.ClearUpdatedAt()
	return uiu
}

// SetDeletedAt sets the deleted_at field.
func (uiu *UserInfoUpdate) SetDeletedAt(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetDeletedAt(t)
	return uiu
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableDeletedAt(t *time.Time) *UserInfoUpdate {
	if t != nil {
		uiu.SetDeletedAt(*t)
	}
	return uiu
}

// ClearDeletedAt clears the value of deleted_at.
func (uiu *UserInfoUpdate) ClearDeletedAt() *UserInfoUpdate {
	uiu.mutation.ClearDeletedAt()
	return uiu
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiu *UserInfoUpdate) Mutation() *UserInfoMutation {
	return uiu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uiu *UserInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uiu.hooks) == 0 {
		affected, err = uiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation user %T", m)
			}
			uiu.mutation = mutation
			affected, err = uiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uiu.hooks) - 1; i >= 0; i-- {
			mut = uiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uiu *UserInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := uiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiu *UserInfoUpdate) Exec(ctx context.Context) error {
	_, err := uiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiu *UserInfoUpdate) ExecX(ctx context.Context) {
	if err := uiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uiu *UserInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userinfo.Table,
			Columns: userinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userinfo.FieldID,
			},
		},
	}
	if ps := uiu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiu.mutation.UserIdentity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldUserIdentity,
		})
	}
	if uiu.mutation.UserIdentityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userinfo.FieldUserIdentity,
		})
	}
	if value, ok := uiu.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userinfo.FieldChannel,
		})
	}
	if value, ok := uiu.mutation.AddedChannel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userinfo.FieldChannel,
		})
	}
	if value, ok := uiu.mutation.Form(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userinfo.FieldForm,
		})
	}
	if value, ok := uiu.mutation.AddedForm(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userinfo.FieldForm,
		})
	}
	if value, ok := uiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldCreatedAt,
		})
	}
	if uiu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userinfo.FieldCreatedAt,
		})
	}
	if value, ok := uiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldUpdatedAt,
		})
	}
	if uiu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userinfo.FieldUpdatedAt,
		})
	}
	if value, ok := uiu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldDeletedAt,
		})
	}
	if uiu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userinfo.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserInfoUpdateOne is the builder for updating a single UserInfo entity.
type UserInfoUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserInfoMutation
}

// SetUserIdentity sets the user_identity field.
func (uiuo *UserInfoUpdateOne) SetUserIdentity(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetUserIdentity(s)
	return uiuo
}

// SetNillableUserIdentity sets the user_identity field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableUserIdentity(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetUserIdentity(*s)
	}
	return uiuo
}

// ClearUserIdentity clears the value of user_identity.
func (uiuo *UserInfoUpdateOne) ClearUserIdentity() *UserInfoUpdateOne {
	uiuo.mutation.ClearUserIdentity()
	return uiuo
}

// SetChannel sets the channel field.
func (uiuo *UserInfoUpdateOne) SetChannel(i int32) *UserInfoUpdateOne {
	uiuo.mutation.ResetChannel()
	uiuo.mutation.SetChannel(i)
	return uiuo
}

// SetNillableChannel sets the channel field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableChannel(i *int32) *UserInfoUpdateOne {
	if i != nil {
		uiuo.SetChannel(*i)
	}
	return uiuo
}

// AddChannel adds i to channel.
func (uiuo *UserInfoUpdateOne) AddChannel(i int32) *UserInfoUpdateOne {
	uiuo.mutation.AddChannel(i)
	return uiuo
}

// SetForm sets the form field.
func (uiuo *UserInfoUpdateOne) SetForm(i int32) *UserInfoUpdateOne {
	uiuo.mutation.ResetForm()
	uiuo.mutation.SetForm(i)
	return uiuo
}

// SetNillableForm sets the form field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableForm(i *int32) *UserInfoUpdateOne {
	if i != nil {
		uiuo.SetForm(*i)
	}
	return uiuo
}

// AddForm adds i to form.
func (uiuo *UserInfoUpdateOne) AddForm(i int32) *UserInfoUpdateOne {
	uiuo.mutation.AddForm(i)
	return uiuo
}

// SetCreatedAt sets the created_at field.
func (uiuo *UserInfoUpdateOne) SetCreatedAt(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetCreatedAt(t)
	return uiuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableCreatedAt(t *time.Time) *UserInfoUpdateOne {
	if t != nil {
		uiuo.SetCreatedAt(*t)
	}
	return uiuo
}

// ClearCreatedAt clears the value of created_at.
func (uiuo *UserInfoUpdateOne) ClearCreatedAt() *UserInfoUpdateOne {
	uiuo.mutation.ClearCreatedAt()
	return uiuo
}

// SetUpdatedAt sets the updated_at field.
func (uiuo *UserInfoUpdateOne) SetUpdatedAt(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetUpdatedAt(t)
	return uiuo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserInfoUpdateOne {
	if t != nil {
		uiuo.SetUpdatedAt(*t)
	}
	return uiuo
}

// ClearUpdatedAt clears the value of updated_at.
func (uiuo *UserInfoUpdateOne) ClearUpdatedAt() *UserInfoUpdateOne {
	uiuo.mutation.ClearUpdatedAt()
	return uiuo
}

// SetDeletedAt sets the deleted_at field.
func (uiuo *UserInfoUpdateOne) SetDeletedAt(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetDeletedAt(t)
	return uiuo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableDeletedAt(t *time.Time) *UserInfoUpdateOne {
	if t != nil {
		uiuo.SetDeletedAt(*t)
	}
	return uiuo
}

// ClearDeletedAt clears the value of deleted_at.
func (uiuo *UserInfoUpdateOne) ClearDeletedAt() *UserInfoUpdateOne {
	uiuo.mutation.ClearDeletedAt()
	return uiuo
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiuo *UserInfoUpdateOne) Mutation() *UserInfoMutation {
	return uiuo.mutation
}

// Save executes the query and returns the updated entity.
func (uiuo *UserInfoUpdateOne) Save(ctx context.Context) (*UserInfo, error) {
	var (
		err  error
		node *UserInfo
	)
	if len(uiuo.hooks) == 0 {
		node, err = uiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation user %T", m)
			}
			uiuo.mutation = mutation
			node, err = uiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uiuo.hooks) - 1; i >= 0; i-- {
			mut = uiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) SaveX(ctx context.Context) *UserInfo {
	node, err := uiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiuo *UserInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := uiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) ExecX(ctx context.Context) {
	if err := uiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uiuo *UserInfoUpdateOne) sqlSave(ctx context.Context) (_node *UserInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userinfo.Table,
			Columns: userinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userinfo.FieldID,
			},
		},
	}
	id, ok := uiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uiuo.mutation.UserIdentity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldUserIdentity,
		})
	}
	if uiuo.mutation.UserIdentityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userinfo.FieldUserIdentity,
		})
	}
	if value, ok := uiuo.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userinfo.FieldChannel,
		})
	}
	if value, ok := uiuo.mutation.AddedChannel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userinfo.FieldChannel,
		})
	}
	if value, ok := uiuo.mutation.Form(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userinfo.FieldForm,
		})
	}
	if value, ok := uiuo.mutation.AddedForm(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userinfo.FieldForm,
		})
	}
	if value, ok := uiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldCreatedAt,
		})
	}
	if uiuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userinfo.FieldCreatedAt,
		})
	}
	if value, ok := uiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldUpdatedAt,
		})
	}
	if uiuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userinfo.FieldUpdatedAt,
		})
	}
	if value, ok := uiuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldDeletedAt,
		})
	}
	if uiuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userinfo.FieldDeletedAt,
		})
	}
	_node = &UserInfo{config: uiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
